{"ast":null,"code":"var _jsxFileName = \"/Users/rafalskrzydelski/development/my_projects/wealth_ui/src/components/pages/Crypto.js\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\nimport { Table } from '../Table';\nimport { SubmitButton, Form, TextInput, TextArea, SelectInput } from './css/metals';\nimport { ListTitle, DelButton, CashImage, TableWrapper } from './css/cash';\nimport crypto from '../../static/crypto.jpg';\nimport { cryptoUrl, accountUrl, refreshTokenUrl } from '../endpoints';\nexport default class Crypto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCurrency = async () => {\n      try {\n        const res = await Axios.get(accountUrl, {\n          headers: {\n            authorization: 'JWT ' + localStorage.getItem('access')\n          }\n        });\n        const state = this.state;\n        state.crypto['bought_price_currency'] = res.data.my_currency;\n\n        if (res.data.my_currency === 'PLN') {\n          state.my_currency = 'zł';\n        } else if (res.data.my_currency === 'USD') {\n          state.my_currency = '$';\n        } else if (res.data.my_currency === 'EUR') {\n          state.my_currency = '€';\n        } else if (res.data.my_currency === 'CHF') {\n          state.my_currency = 'chf';\n        }\n\n        this.setState({\n          state\n        });\n      } catch (error) {\n        if (error.response.status === 401) {\n          const res = await Axios.post(refreshTokenUrl, {\n            refresh: localStorage.getItem('refresh')\n          });\n          localStorage.setItem('access', res.data.access);\n          this.getCurrency();\n        }\n      }\n    };\n\n    this.collectCrypto = async () => {\n      try {\n        const res = await Axios.get(cryptoUrl, {\n          headers: {\n            authorization: 'JWT ' + localStorage.getItem('access')\n          }\n        });\n        console.log(res);\n        const CryptoList = [...this.state.CryptoList, ...res.data];\n        this.setState({\n          CryptoList\n        });\n      } catch (error) {\n        if (error.response.status === 401) {\n          const res = await Axios.post(refreshTokenUrl, {\n            refresh: localStorage.getItem('refresh')\n          });\n          localStorage.setItem('access', res.data.access);\n          this.collectCrypto();\n        }\n      }\n    };\n\n    this.onSubmitDel = async (e, id) => {\n      e.preventDefault();\n\n      try {\n        await Axios.delete(cryptoUrl + '/' + id, {\n          headers: {\n            authorization: 'JWT ' + localStorage.getItem('access')\n          }\n        });\n        this.setState({\n          CryptoList: []\n        });\n        this.collectCrypto();\n      } catch (error) {\n        if (error.response.status === 401) {\n          const res = await Axios.post(refreshTokenUrl, {\n            refresh: localStorage.getItem('refresh')\n          });\n          localStorage.setItem('access', res.data.access);\n          this.onSubmitDel(e, id);\n        }\n      }\n    };\n\n    this.handleSubmitAdd = async e => {\n      e.preventDefault();\n\n      try {\n        await Axios.post(cryptoUrl, this.state.crypto, {\n          headers: {\n            authorization: 'JWT ' + localStorage.getItem('access')\n          }\n        });\n        this.setState({\n          CryptoList: []\n        });\n        this.collectCrypto();\n      } catch (error) {\n        if (error.response.status === 401) {\n          const res = await Axios.post(refreshTokenUrl, {\n            refresh: localStorage.getItem('refresh')\n          });\n          localStorage.setItem('access', res.data.access);\n          this.onSubmitAdd(e);\n        }\n      }\n    };\n\n    this.handleFormInput = event => {\n      const res = this.state.crypto;\n      res[event.target.name] = event.target.value;\n      this.setState({\n        crypto: res\n      });\n    };\n\n    this.state = {\n      CryptoList: [],\n      crypto: {\n        name: \"\",\n        bought_price: '',\n        bought_price_currency: '',\n        amount: '',\n        date_of_bought: '',\n        description: ''\n      },\n      my_currency: ''\n    };\n  }\n\n  componentDidMount() {\n    this.collectCrypto();\n    this.getCurrency();\n  }\n\n  render() {\n    const columns = [{\n      Header: \"My crypto\",\n      columns: [{\n        Header: 'id',\n        accessor: 'id'\n      }, {\n        Header: 'name',\n        accessor: 'name'\n      }, {\n        Header: 'amount',\n        accessor: 'amount'\n      }, {\n        Header: 'bought price',\n        accessor: 'bought_price'\n      }, {\n        Header: 'date of bought',\n        accessor: 'date_of_bought'\n      }, {\n        Header: 'action',\n        accessor: 'delete',\n        Cell: ({\n          cell\n        }) => /*#__PURE__*/React.createElement(DelButton, {\n          value: cell.row.values.name,\n          onClick: e => this.onSubmitDel(e, cell.row.values.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 19\n          }\n        }, \"delete\")\n      }]\n    }];\n    const data = this.state.CryptoList.map(crypto => ({\n      id: crypto.id,\n      name: crypto.name,\n      amount: crypto.amount,\n      bought_price: crypto.bought_price,\n      date_of_bought: crypto.date_of_bought.slice(0, 10),\n      delete: \"    \"\n    }));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, \"List of your crypto:\"), /*#__PURE__*/React.createElement(CashImage, {\n      image: crypto,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TableWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      columns: columns,\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(ListTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, \"Add new crypto\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmitAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SelectInput, {\n      id: \"crypto_name\",\n      name: \"name\",\n      onChange: this.handleFormInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"btc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 19\n      }\n    }, \"bitcoin\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"bch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }, \"bitcon cash\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"eth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }\n    }, \"ethereum\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"xrp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, \"rippla\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"ltc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 19\n      }\n    }, \"litecoin\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"dot\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, \"polkadot\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"neo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, \"neo\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"flm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }, \"flamingo\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"theta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 19\n      }\n    }, \"theta\")), /*#__PURE__*/React.createElement(TextInput, {\n      type: \"number\",\n      name: \"bought_price\",\n      placeholder: \"bought price\",\n      min: \"1\",\n      onChange: this.handleFormInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      type: \"number\",\n      name: \"amount\",\n      placeholder: \"amount\",\n      step: \"0.0000000001\",\n      onChange: this.handleFormInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      type: \"date\",\n      name: \"date_of_bought\",\n      placeholder: \"date of bought\",\n      value: this.state.crypto.date_of_bought,\n      onChange: this.handleFormInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(TextArea, {\n      name: \"description\",\n      rows: \"4\",\n      cols: \"50\",\n      placeholder: \"description\",\n      onChange: this.handleFormInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(SubmitButton, {\n      type: \"submit\",\n      value: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/rafalskrzydelski/development/my_projects/wealth_ui/src/components/pages/Crypto.js"],"names":["React","Component","Axios","Table","SubmitButton","Form","TextInput","TextArea","SelectInput","ListTitle","DelButton","CashImage","TableWrapper","crypto","cryptoUrl","accountUrl","refreshTokenUrl","Crypto","constructor","props","getCurrency","res","get","headers","authorization","localStorage","getItem","state","data","my_currency","setState","error","response","status","post","refresh","setItem","access","collectCrypto","console","log","CryptoList","onSubmitDel","e","id","preventDefault","delete","handleSubmitAdd","onSubmitAdd","handleFormInput","event","target","name","value","bought_price","bought_price_currency","amount","date_of_bought","description","componentDidMount","render","columns","Header","accessor","Cell","cell","row","values","map","slice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Axios from 'axios'\nimport { Table } from '../Table'\n\nimport { SubmitButton, Form, TextInput, TextArea, SelectInput } from './css/metals'\nimport { ListTitle, DelButton, CashImage, TableWrapper } from './css/cash'\nimport crypto from '../../static/crypto.jpg'\n\nimport { \n    cryptoUrl,\n    accountUrl,\n    refreshTokenUrl\n} from '../endpoints'\n\nexport default class Crypto extends Component {\n    constructor (props) {\n      super(props)\n      this.state = {\n        CryptoList: [],\n        crypto: {\n            name: \"\",\n            bought_price: '',\n            bought_price_currency: '',\n            amount: '',\n            date_of_bought: '',\n            description: ''\n        },\n        my_currency: '',\n    }\n    }\n\n    componentDidMount () {\n        this.collectCrypto()\n        this.getCurrency()\n    }\n\n    getCurrency = async () => {\n      try {\n          const res = await Axios.get(accountUrl, {headers: {authorization: 'JWT ' + localStorage.getItem('access')}})\n          const state = this.state\n          state.crypto['bought_price_currency'] = res.data.my_currency\n          if (res.data.my_currency === 'PLN') {\n            state.my_currency = 'zł'\n          } else if (res.data.my_currency === 'USD') {\n            state.my_currency = '$'\n          } else if (res.data.my_currency === 'EUR') {\n            state.my_currency = '€'\n          } else if (res.data.my_currency === 'CHF') {\n            state.my_currency = 'chf'\n          }\n          this.setState({state})\n      } catch (error) {\n          if (error.response.status === 401) {\n              const res = await Axios.post(refreshTokenUrl, {refresh: localStorage.getItem('refresh')})\n              localStorage.setItem('access', res.data.access)\n              this.getCurrency()\n            }\n      }\n    }\n\n    collectCrypto = async () => {\n      try {\n            const res = await Axios.get(cryptoUrl, {headers: {authorization: 'JWT ' + localStorage.getItem('access')}})\n            console.log(res)\n            const CryptoList = [...this.state.CryptoList, ...res.data]\n            this.setState({CryptoList})\n        } catch (error) {\n            if (error.response.status === 401) {\n                const res = await Axios.post(refreshTokenUrl, {refresh: localStorage.getItem('refresh')})\n                localStorage.setItem('access', res.data.access)\n                this.collectCrypto()\n              }\n        }\n    }\n\n    onSubmitDel = async (e, id) => {\n      e.preventDefault()\n      try {\n          await Axios.delete(cryptoUrl + '/' + id, {headers: {authorization: 'JWT ' + localStorage.getItem('access')}})\n          this.setState({CryptoList: []})\n          this.collectCrypto()\n      } catch (error) {\n          if (error.response.status === 401) {\n              const res = await Axios.post(refreshTokenUrl, {refresh: localStorage.getItem('refresh')})\n              localStorage.setItem('access', res.data.access)\n              this.onSubmitDel(e, id)\n            }\n      }\n    }\n\n    handleSubmitAdd = async (e) => {\n      e.preventDefault()\n      try {\n          await Axios.post(cryptoUrl, this.state.crypto, {headers: {authorization: 'JWT ' + localStorage.getItem('access')}})\n          this.setState({CryptoList: []})\n          this.collectCrypto()\n      } catch (error) {\n          if (error.response.status === 401) {\n              const res = await Axios.post(refreshTokenUrl, {refresh: localStorage.getItem('refresh')})\n              localStorage.setItem('access', res.data.access)\n              this.onSubmitAdd(e)\n            }\n      }\n    }\n\n    handleFormInput = (event) => {\n        const res = this.state.crypto\n        res[event.target.name] = event.target.value\n        this.setState({ crypto: res })\n    }\n\n    render() {\n      const columns = [\n        {\n          Header: \"My crypto\",\n          columns: [\n            {\n                Header: 'id',\n                accessor: 'id',\n              },\n              {\n                Header: 'name',\n                accessor: 'name',\n              },\n              {\n                Header: 'amount',\n                accessor: 'amount',\n              },\n              {\n                Header: 'bought price',\n                accessor: 'bought_price',\n              },\n              {\n                Header: 'date of bought',\n                accessor: 'date_of_bought',\n              },\n              {\n                Header: 'action',\n                accessor: 'delete',\n                Cell: ({ cell }) => (\n                  <DelButton value={cell.row.values.name} onClick={(e) => this.onSubmitDel(e, cell.row.values.id)}>\n                    delete\n                  </DelButton>)\n              }\n          ],\n        },\n      ]\n\n      const data = this.state.CryptoList.map((crypto) => (\n            {\n                id: crypto.id,\n                name: crypto.name,\n                amount: crypto.amount,\n                bought_price: crypto.bought_price,\n                date_of_bought: crypto.date_of_bought.slice(0, 10),\n                delete: \"    \"\n            }))\n\n        return (\n          <>\n            <ListTitle>List of your crypto:</ListTitle>\n            <CashImage image={crypto}></CashImage>\n            <TableWrapper>\n              <Table columns={columns} data={data} />\n            </TableWrapper>\n              <ListTitle>Add new crypto</ListTitle>\n              <Form onSubmit={this.handleSubmitAdd}>\n                <SelectInput id=\"crypto_name\" name=\"name\" onChange={this.handleFormInput}>\n                  <option value=\"btc\">bitcoin</option>\n                  <option value=\"bch\">bitcon cash</option>\n                  <option value=\"eth\">ethereum</option>\n                  <option value=\"xrp\">rippla</option>\n                  <option value=\"ltc\">litecoin</option>\n                  <option value=\"dot\">polkadot</option>\n                  <option value=\"neo\">neo</option>\n                  <option value=\"flm\">flamingo</option>\n                  <option value=\"theta\">theta</option>\n                </SelectInput>\n                <TextInput\n                        type='number'\n                        name='bought_price'\n                        placeholder='bought price'\n                        min=\"1\"\n                        onChange={this.handleFormInput}\n                      />\n                      <TextInput\n                        type='number'\n                        name='amount'\n                        placeholder='amount'\n                        step=\"0.0000000001\"\n                        onChange={this.handleFormInput}\n                      />\n                      <TextInput\n                        type='date'\n                        name='date_of_bought'\n                        placeholder='date of bought'\n                        value={this.state.crypto.date_of_bought}\n                        onChange={this.handleFormInput}\n                      />\n                      <TextArea\n                        name=\"description\"\n                        rows=\"4\"\n                        cols=\"50\"\n                        placeholder=\"description\"\n                        onChange={this.handleFormInput}\n                      ></TextArea>\n                  <SubmitButton type=\"submit\" value=\"Add\" />\n                </Form>\n          </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}